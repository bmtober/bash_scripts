#!/bin/bash

me="$(basename $0)"

syntax="
This script illustrates how to redirect stdout and stderr through a named
pipe in a background process to prefix each line with a time stamp before
writing to a log file."

if [[ ${#} -lt 1 ]]
then
  echo "${syntax}"
  exit 1
fi


# Define log and fifo file names.
stdout_log="${me}.log"
fifo_name="${me}.${$}.fifo"

# Create fifo named pipe which is deleted upon script exit.
mkfifo "${fifo_name}"
trap 'rm "${fifo_name}"' EXIT

# Everything written to the pipe gets time stamp prefixed and then written to log file.
# The 'ts' (time stamp) command is from the 'moreutils' package.
cat "${fifo_name}" | ts > "$stdout_log" &

# Associate fd3 with a copy of stdout and then redirect stdout and stderr to fifo.
exec 3<&1 1>"${fifo_name}" 2>&1

# Annotate start event to log and stdout.
echo "Starting '$@'" | tee >(cat >&3)

# --------------------------------------------------
# In this section put whatever commands are to be 
# time stamped and logged. Anything the commands 
# emit to stdout and stderr will be logged.

# Run whatever command was provided as script argument.
eval "$@"
# --------------------------------------------------

# Annotate end event to log and stdout.
echo "End '$@'" | tee >(cat >&3)

